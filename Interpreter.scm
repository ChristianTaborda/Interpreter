#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 108 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 60 194 57 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 1 10 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 85 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 185 220 113
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 155 255 155
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 116 116
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 18 67 155 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 30 70 190 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 135 185 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 176 208 208
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 116 116 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 125 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 143 15 223 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 141 19 5 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 244 194 71 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 127
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 86 86 86 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
30 3 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 31 31 -1 -1           0 6601 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #"; PROYECTO FINAL: FUNDAMENTOS DE LENGUAJES DE PROGRAMACI\303\223N   "
 #"                                                                 "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 126
(
 #"; INTEGRANTES:                                                      "
 #"                                                          "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 9         367 21           0 0           0 60 0 24 3 9 #"         "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"Christian"
0 0 24 3 1 #" "
0 0 14 3 6 #"Camilo"
0 0 24 3 1 #" "
0 0 14 3 7 #"Taborda"
0 0 24 3 1 #" "
0 0 14 3 8 #"Campi\303\261o"
0 0 24 3 13 #"             "
0 0 14 3 12 #"1632081-3743"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"Cristian"
0 0 24 3 1 #" "
0 0 14 3 6 #"Camilo"
0 0 24 3 1 #" "
0 0 14 3 10 #"Vallecilla"
0 0 24 3 1 #" "
0 0 14 3 7 #"Cuellar"
0 0 24 3 11 #"           "
0 0 14 3 12 #"1628790-3743"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"Esneider"
0 0 24 3 1 #" "
0 0 14 3 5 #"Arbey"
0 0 24 3 1 #" "
0 0 14 3 7 #"Manzano"
0 0 24 3 1 #" "
0 0 14 3 6 #"Arango"
0 0 24 3 16 #"                "
0 0 14 3 12 #"1628373-3743"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"Santiago"
0 0 24 3 1 #" "
0 0 14 3 10 #"Hern\303\241ndez"
0 0 24 3 1 #" "
0 0 14 3 5 #"Arias"
0 0 24 3 21 #"                     "
0 0 14 3 12 #"1631281-3743"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"Oliver"
0 0 24 3 1 #" "
0 0 14 3 5 #"Henao"
0 0 24 3 1 #" "
0 0 14 3 9 #"C\303\241rdenas"
0 0 24 3 24 #"                        "
0 0 14 3 12 #"1631951-3743"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #"; Definici\303\263n BNF del Lenguaje:"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9        4339 21           0 0           0 722 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"<program>"
0 0 24 3 6 #"      "
0 0 14 3 3 #"::="
0 0 24 3 2 #" {"
0 0 14 3 11 #"<dec-table>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 2 #" {"
0 0 14 3 11 #"<dec-class>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"main"
0 0 24 3 3 #" { "
0 0 14 3 12 #"<expression>"
0 0 24 3 2 #" }"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 2 #"<p"
0 0 24 3 2 #" ("
0 0 14 3 10 #"dec-tablas"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-clases"
0 0 24 3 1 #" "
0 0 14 3 6 #"codigo"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 11 #"<dec-table>"
0 0 24 3 4 #"    "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 24 3 4 #" { {"
0 0 14 3 5 #"field"
0 0 24 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 2 #" {"
0 0 14 3 12 #"<dec-method>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 2 #" }"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 3 #"<dt"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"metodos"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 11 #"<dec-class>"
0 0 24 3 4 #"    "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 15 3 5 #"class"
0 0 24 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 24 3 4 #" { {"
0 0 14 3 5 #"field"
0 0 24 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 2 #" {"
0 0 14 3 12 #"<dec-method>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 2 #" }"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 3 #"<dc"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"metodos"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 12 #"<dec-method>"
0 0 24 3 3 #"   "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 6 #"method"
0 0 24 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 24 3 3 #" ({"
0 0 14 3 12 #"<identifier>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 4 #")) {"
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 3 #"<mc"
0 0 24 3 2 #" ("
0 0 14 3 13 #"nombre-metodo"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 12 #"<expression>"
0 0 24 3 3 #"   "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 8 #"<number>"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 8 #"<int-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 8 #"<string>"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 11 #"<string-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 9 #"<boolean>"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 9 #"<bool-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 8 #"<var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 11 #"<primitive>"
0 0 24 3 3 #" ({"
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 9 #"<prim-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operador"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"<expression>"
0 0 24 3 3 #") {"
0 0 14 3 12 #"<expression>"
0 0 24 3 3 #"} {"
0 0 14 3 6 #"elseif"
0 0 24 3 2 #" ("
0 0 14 3 12 #"<expression>"
0 0 24 3 3 #") {"
0 0 14 3 12 #"<expression>"
0 0 24 3 2 #"}}"
0 0 14 3 1 #"*"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"else"
0 0 24 3 2 #" {"
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 7 #"<if-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pregunta1"
0 0 24 3 1 #" "
0 0 14 3 9 #"positiva1"
0 0 24 3 1 #" "
0 0 14 3 9 #"preguntas"
0 0 24 3 1 #" "
0 0 14 3 9 #"positivas"
0 0 24 3 1 #" "
0 0 14 3 8 #"negativa"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 15 3 3 #"let"
0 0 24 3 3 #" ({"
0 0 14 3 12 #"<identifier>"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 2 #") "
0 0 14 3 2 #"in"
0 0 24 3 2 #" {"
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 8 #"<let-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #" ({"
0 0 14 3 12 #"<identifier>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 3 #")) "
0 0 14 3 12 #"<expression>"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 8 #"<fun-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 12 #"<expression>"
0 0 24 3 3 #" ({"
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 8 #"<app-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"nombre"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" ({"
0 0 14 3 10 #"identifier"
0 0 24 3 3 #" ({"
0 0 14 3 10 #"identifier"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 3 #")) "
0 0 14 3 2 #"in"
0 0 24 3 2 #" {"
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 11 #"<letrec-exp"
0 0 24 3 1 #"("
0 0 14 3 7 #"nombres"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 7 #"cuerpos"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 2 #" {"
0 0 14 3 12 #"<expression>"
0 0 24 3 2 #" {"
0 0 17 3 23 #"; <expression>}* ;} end"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 8 #"<beg-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"principal"
0 0 24 3 1 #" "
0 0 14 3 5 #"otras"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 24 3 1 #" "
0 0 14 3 2 #":="
0 0 24 3 1 #" "
0 0 14 3 12 #"<expression>"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 8 #"<set-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #" ({"
0 0 14 3 10 #"expression"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 8 #"<lis-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"elementos"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 15 3 3 #"for"
0 0 24 3 2 #" ("
0 0 14 3 12 #"<identifier>"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 12 #"<expression>"
0 0 24 3 2 #") "
0 0 14 3 2 #"to"
0 0 24 3 2 #" ("
0 0 14 3 12 #"<expression>"
0 0 24 3 2 #") "
0 0 14 3 4 #"each"
0 0 24 3 2 #" ("
0 0 14 3 12 #"<expression>"
0 0 24 3 2 #") "
0 0 15 3 2 #"do"
0 0 24 3 2 #" {"
0 0 14 3 12 #"<expression>"
0 0 24 3 2 #"} "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 8 #"<for-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #" "
0 0 14 3 6 #"parada"
0 0 24 3 1 #" "
0 0 14 3 10 #"incremento"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 6 #"select"
0 0 24 3 2 #" ("
0 0 14 3 12 #"<identifier>"
0 0 24 3 2 #") "
0 0 14 3 4 #"from"
0 0 24 3 2 #" ("
0 0 14 3 12 #"<expression>"
0 0 24 3 2 #") "
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 8 #"<sel-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"actual"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 24 3 3 #" ({"
0 0 14 3 11 #"<expression"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 8 #"<new-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"clase"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 24 3 3 #" ({"
0 0 14 3 11 #"<expression"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 8 #"<met-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 6 #"insert"
0 0 24 3 3 #" ({"
0 0 14 3 10 #"expression"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 3 #")) "
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 8 #"<ins-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 6 #"access"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 8 #"<acc-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 6 #"table."
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 3 #" ({"
0 0 14 3 12 #"<expression>"
0 0 24 3 1 #"}"
0 0 14 3 1 #"*"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 8 #"<tab-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 11 #"selectTable"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 4 #"from"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 9 #"<selT-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"selector"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #")"
0 0 14 3 1 #">"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 11 #"<primitive>"
0 0 24 3 4 #"    "
0 0 14 3 3 #"::="
0 0 24 3 2 #"  "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 2 #"++"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 2 #"--"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 2 #"=="
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 2 #"\302\254"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 2 #"&&"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"::="
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 5 #"null?"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #"; Especificaci\303\263n L\303\251xica"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 8 #"white-sp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"comment"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 3 #"\"%\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"identifier"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"string"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 3 #"\"|\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 24 3 3 #")) "
0 0 19 3 3 #"\"|\""
0 0 24 3 2 #") "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"boolean"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     (("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#T\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#F\""
0 0 24 3 3 #")) "
0 0 14 3 6 #"symbol"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 42
#"; Especificaci\303\263n Sint\303\241ctica (Gram\303\241tica)"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 7 #"program"
0 0 24 3 3 #" (("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 9 #"dec-table"
0 0 24 3 3 #") ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 9 #"dec-class"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"main\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 14 3 7 #"int-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 2 #") "
0 0 14 3 10 #"string-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 7 #"boolean"
0 0 24 3 2 #") "
0 0 14 3 8 #"bool-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 8 #"prim-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"elseif\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"let\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"let-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"proc\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"fun-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"apply\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"app-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"letrec\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 10 #"letrec-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"begin\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"end\""
0 0 24 3 2 #") "
0 0 14 3 7 #"beg-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"set\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 4 #"\":=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"set-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"list\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"lis-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"select\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"from\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"where\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"sel-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"for\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"to\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"each\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"for-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"new\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"new-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"send\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"met-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"insert\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 7 #"ins-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"access\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"acc-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"table\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"tab-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 13 #"\"selectTable\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"from\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"where\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 8 #"selT-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 2 #") "
0 0 14 3 8 #"sum-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #") "
0 0 14 3 8 #"res-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #") "
0 0 14 3 8 #"mul-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"++\""
0 0 24 3 2 #") "
0 0 14 3 8 #"inc-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"--\""
0 0 24 3 2 #") "
0 0 14 3 8 #"dec-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"/\""
0 0 24 3 2 #") "
0 0 14 3 8 #"div-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"==\""
0 0 24 3 2 #") "
0 0 14 3 7 #"eq-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"max\""
0 0 24 3 2 #") "
0 0 14 3 8 #"max-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"min\""
0 0 24 3 2 #") "
0 0 14 3 8 #"min-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #") "
0 0 14 3 8 #"men-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\">\""
0 0 24 3 2 #") "
0 0 14 3 8 #"may-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"<=\""
0 0 24 3 2 #") "
0 0 14 3 9 #"meeq-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\">=\""
0 0 24 3 2 #") "
0 0 14 3 9 #"maeq-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"or\""
0 0 24 3 2 #") "
0 0 14 3 7 #"or-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"&&\""
0 0 24 3 2 #") "
0 0 14 3 8 #"and-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"\302\254\""
0 0 24 3 2 #") "
0 0 14 3 8 #"not-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"append\""
0 0 24 3 2 #") "
0 0 14 3 8 #"app-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"length\""
0 0 24 3 2 #") "
0 0 14 3 8 #"len-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"cons\""
0 0 24 3 2 #") "
0 0 14 3 8 #"con-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"car\""
0 0 24 3 2 #") "
0 0 14 3 8 #"car-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"cdr\""
0 0 24 3 2 #") "
0 0 14 3 8 #"cdr-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"null?\""
0 0 24 3 2 #") "
0 0 14 3 8 #"nul-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"dec-table"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"table\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"field\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 3 #") ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-method"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"dec-class"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"class\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"field\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 3 #") ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-method"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"dc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"dec-method"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"method\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"dm"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
(
 #"; Tipos de Datos para la Sin"
 #"t\303\241xis Abstracta de la Gram\303\241tica"
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; // Construidos Manualmente //:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; TDA (PROGRAM):"
0 0 24 29 1 #"\n"
0 9         187 21           0 0           0 30 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 8 #"program?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 10 #"dec-tablas"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-table?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"dec-clases"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-class?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"codigo"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; TDA (EXPRESSION):"
0 0 24 29 1 #"\n"
0 9        2347 21           0 0           0 390 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"int-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"string-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"bool-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"prim-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operador"
0 0 24 3 1 #" "
0 0 14 3 10 #"primitive?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"operandos"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"bool-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"if-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pregunta1"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"positiva1"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"pregunstas"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"positivas"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"negativa"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"let-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 7 #"valores"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"fun-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"app-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"nombre"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"entradas"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"letrec-exp"
0 0 24 3 2 #" ("
0 0 14 3 7 #"nombres"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"idss"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"cuerpos"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"begin-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"principal"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"otras"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"set-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"valor"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"lis-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"elementos"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"sel-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"actual"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"elementos"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"for-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"valor"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"parada"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"incremento"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"new-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"clase"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"entradas"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"met-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"entradas"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"ins-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"entradas"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"acc-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"tab-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 9 #"s\303\255mbolo?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"entradas"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"selT-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"selector"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; TDA (PRIMITIVE):"
0 0 24 29 1 #"\n"
0 9         571 21           0 0           0 94 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 10 #"primitive?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"sum-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"res-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"mul-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"inc-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"dec-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"div-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"eq-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"max-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"min-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"men-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"may-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"meeq-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"maeq-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"and-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"or-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"not-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"app-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"len-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"con-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"car-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"cdr-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"nul-prim"
0 0 24 3 2 #"))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; TDA (DEC-TABLE):"
0 0 24 29 1 #"\n"
0 9         187 21           0 0           0 30 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 9 #"dec-table"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-table?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"dc"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"metodos"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"dec-method?"
0 0 24 3 4 #"))))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; TDA (DEC-CLASS):"
0 0 24 29 1 #"\n"
0 9         187 21           0 0           0 30 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 9 #"dec-class"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-class?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"dc"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"metodos"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"dec-method?"
0 0 24 3 4 #"))))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; TDA (DEC-METHOD):"
0 0 24 29 1 #"\n"
0 9         175 21           0 0           0 28 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-method"
0 0 24 3 1 #" "
0 0 14 3 11 #"dec-method?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"dm"
0 0 24 3 2 #" ("
0 0 14 3 13 #"nombre-metodo"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; // Construidos Autom\303\241ticamente //:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"show-the-datatypes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Front-End"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; // Scanner (Analizador L\303\251xi"
 #"co) & Parser (Analizador Sint\303\241ctico) //:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; // Scanner (Analizador L\303\251xico) //:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Interfaz"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"interpretador"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"sllgen:make-rep-loop"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"-->\""
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"codigo"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 18 #"ambiente-registros"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 8 #"ejecutar"
0 0 24 3 1 #" "
0 0 14 3 6 #"codigo"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-stream-parser"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Interpretador"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 126
(
 #"; Tipos de datos abstractos definidos:                              "
 #"                                                          "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; TDA (BLANCO):"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 6 #"blanco"
0 0 24 3 1 #" "
0 0 14 3 7 #"blanco?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 15 #"valor-expresado"
0 0 24 3 1 #" "
0 0 14 3 16 #"valor-expresado?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"blanco-indirecto"
0 0 24 3 2 #" ("
0 0 14 3 18 #"referencia-directa"
0 0 24 3 1 #" "
0 0 14 3 19 #"referencia-directa?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; TDA (REFERENCIA):"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 10 #"referencia"
0 0 24 3 1 #" "
0 0 14 3 11 #"referencia?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; TDA (FUNCION):"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 7 #"funcion"
0 0 24 3 1 #" "
0 0 14 3 8 #"funcion?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"clausura"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 14 3 9 #"ambiente?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; TDA (AMBIENTE):"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 14 3 9 #"ambiente?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"ambiente-vacio-rec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 22 #"ambiente-extendido-rec"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 17 #"ambiente-anterior"
0 0 24 3 1 #" "
0 0 14 3 9 #"ambiente?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; TDA (OBJETO):"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 7 #"objeto?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"ob"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"atributos"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; TDA (REGISTRO):"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 9 #"registro?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"campos"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 165
(
 #"; Definici\303\263n del ambiente inicial de clases, tablas y registr"
 #"os:                                                                 "
 #"                                   "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-clases"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-tablas"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"ambiente-registros"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 126
(
 #"; Funciones auxiliares:                                             "
 #"                                                          "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; valor-scheme?: dato --> booleano"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; Indica si la entrada es un tipo de valor aceptado por scheme."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"valor?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"valor"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; iota: n\303\272mero --> <lista de n\303\272meros>"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #"; Retorna una lista con los "
 #"n\303\272meros desde 0 hasta el n\303\272mero anterior al de entrada"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"iota"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 9 #"siguiente"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 9 #"siguiente"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 9 #"siguiente"
0 0 24 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 9 #"siguiente"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #"; aplicar-if: expression expression <lista de expression> <lista de "
 #"expression> expression ambiente --> dato"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #"; Aplica la operaci\303\263n if, elseif y la operaci\303\263n else a"
 #" un conjunto de expressiones."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"aplicar-if"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pregunta1"
0 0 24 3 1 #" "
0 0 14 3 9 #"positiva1"
0 0 24 3 1 #" "
0 0 14 3 9 #"preguntas"
0 0 24 3 1 #" "
0 0 14 3 9 #"positivas"
0 0 24 3 1 #" "
0 0 14 3 8 #"negativa"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 9 #"pregunta1"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 9 #"positiva1"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 1 #"P"
0 0 24 3 1 #" "
0 0 14 3 9 #"preguntas"
0 0 24 3 3 #") ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 9 #"positivas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"P"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 8 #"negativa"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"pregunta"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"P"
0 0 24 3 2 #") "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 8 #"pregunta"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 8 #"pregunta"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 7 #"evaluar"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"P"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"El "
0 0 19 3 4 #"dato"
0 0 19 3 3 #" de"
0 0 19 3 30 #" entrada no es un booleano ~s\""
0 0 24 3 1 #" "
0 0 14 3 8 #"pregunta"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"El "
0 0 19 3 4 #"dato"
0 0 19 3 3 #" de"
0 0 19 3 1 #" "
0 0 19 3 29 #"entrada no es un booleano ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; numeros?: <lista de datos> --> booleano"
0 0 24 29 1 #"\n"
0 0 17 3 58
(
 #"; Indica si una lista de datos est\303\241 formada por n\303\272mero"
 #"s."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"numeros?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"numeros?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; booleanos?: <lista de datos> --> booleano"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Indica si una lista de datos est\303\241 formada por booleanos."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"booleanos?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"booleanos?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; strings?: <lista de datos> --> booleano"
0 0 24 29 1 #"\n"
0 0 17 3 57
#"; Indica si una lista de datos est\303\241 formada por strings."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"strings?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"strings?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; listas?: <lista de datos> --> booleano"
0 0 24 29 1 #"\n"
0 0 17 3 56
#"; Indica si una lista de datos est\303\241 formada por listas."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"listas?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"listas?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; caso-cons?: <lista de datos> --> booleano"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; Indica si una lista de datos corresponde a las entradas de la prim"
 #"itiva cons."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"caso-cons?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 16 #"valor-expresado?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; unir-strings: <lista de strings> --> string"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; Une los strings de una lista para formar un \303\272nico string."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"unir-strings"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"unir-strings"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; unir-listas: <lista de <lista de datos>> --> <lista de datos>"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Une las listas de una lista para formar una \303\272nica lista."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"unir-listas"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 11 #"unir-listas"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; last: <lista> --> dato"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Retorna el \303\272ltimo elemento de una lista."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"last"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"posicion"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49
#"; maximo: <lista de n\303\272meros> n\303\272mero --> n\303\272mero"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; Retorna el mayor n\303\272mero de una lista."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"maximo"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #" "
0 0 14 3 6 #"ultimo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 6 #"ultimo"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"max"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 6 #"maximo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 6 #"ultimo"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49
#"; minimo: <lista de n\303\272meros> n\303\272mero --> n\303\272mero"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; Retorna el menor n\303\272mero de una lista."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"minimo"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #" "
0 0 14 3 6 #"ultimo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 6 #"ultimo"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"min"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 6 #"minimo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 6 #"ultimo"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; aplicar-and: <lista de booleanos> --> booleano"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Aplica la funci\303\263n and a una lista de booleanos."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"aplicar-and"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 11 #"aplicar-and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; aplicar-or: <lista de booleanos> --> booleano"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; Aplica la funci\303\263n or a una lista de booleanos."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"aplicar-or"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 10 #"aplicar-or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; sumar: <lista de n\303\272meros> --> n\303\272mero"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Suma los n\303\272meros de una lista."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"sumar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 5 #"sumar"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46
#"; multiplicar: <lista de n\303\272meros> --> n\303\272mero"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Multiplica los n\303\272meros de una lista."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"multiplicar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 11 #"multiplicar"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; operar-fun: funci\303\263n <lista de datos> --> dato"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Opera una funci\303\263n con sus respectivas entradas."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"operar-fun"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"F"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"funcion"
0 0 24 3 1 #" "
0 0 14 3 1 #"F"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"clausura"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 2 #" ("
0 0 14 3 18 #"ambiente-extendido"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; obtenerId: expression --> s\303\255mbolo"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #"; Retorna el id de la variable usada en la expresi\303\263n de entra"
 #"da."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"obtenerId"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"tab-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 2 #") "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"obtenerId"
0 0 24 3 1 #" "
0 0 19 3 60
(
 #"\"La expresi\303\263n que se\303\261ala el registro no es la esperad"
 #"a ~s\""
) 0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"obtenerId"
0 0 24 3 1 #" "
0 0 19 3 50
#"\"La expresi\303\263n de selecci\303\263n no es la esperada ~s\""
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; seleccionarT: expression s\303"
 #"\255mbolo expression ambiente n\303\272mero --> <lista de datos>"
) 0 0 24 29 1 #"\n"
0 0 17 3 119
(
 #"; Filtra los registros de una tab"
 #"la que no cumplan con la condici\303\263n de entrada y retorna ciert"
 #"a informaci\303\263n de ellos."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"seleccionarT"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"selector"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"current"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 2 #" ("
0 0 14 3 18 #"ambiente-extendido"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"obtenerId"
0 0 24 3 1 #" "
0 0 14 3 8 #"selector"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 3 #")) "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 8 #"selector"
0 0 24 3 1 #" "
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 3 #") ("
0 0 14 3 12 #"seleccionarT"
0 0 24 3 1 #" "
0 0 14 3 8 #"selector"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 12 #"seleccionarT"
0 0 24 3 1 #" "
0 0 14 3 8 #"selector"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; seleccionar: s\303\255mbolo <lista de datos> expression ambiente -"
 #"-> <lista de datos>"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; Filtra los elementos de una lis"
 #"ta que no cumplan con la condici\303\263n de entrada."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"seleccionar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"actual"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"current"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 2 #" ("
0 0 14 3 18 #"ambiente-extendido"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 3 #")) "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 2 #" ("
0 0 14 3 11 #"seleccionar"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 2 #") "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 11 #"seleccionar"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 2 #") "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #"; aplicar-for: s\303\255mbolo expression expression expression expre"
 #"ssion ambiente dato --> dato"
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #"; Aplica la estructura de iteraci\303\263n for."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"aplicar-for"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #" "
0 0 14 3 6 #"parada"
0 0 24 3 1 #" "
0 0 14 3 10 #"incremento"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 14 3 6 #"salida"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #" "
0 0 14 3 6 #"parada"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 2 #" ("
0 0 14 3 18 #"ambiente-extendido"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 3 #")) "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"aplicar-for"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #" "
0 0 14 3 10 #"incremento"
0 0 24 3 2 #") "
0 0 14 3 6 #"parada"
0 0 24 3 1 #" "
0 0 14 3 10 #"incremento"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 14 #"ambiente-nuevo"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 6 #"salida"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; valor-expresado?: dato --> booleano"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Indica si el dato de entrada pertenece a un valor expresado."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"valor-expresado?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dato"
0 0 24 3 3 #") ("
0 0 14 3 8 #"funcion?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dato"
0 0 24 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dato"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dato"
0 0 24 3 3 #") ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dato"
0 0 24 3 3 #") ("
0 0 14 3 9 #"registro?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dato"
0 0 24 3 3 #") ("
0 0 14 3 7 #"objeto?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dato"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; encontrar-posicion: s\303\255mbolo <lista de s\303\255mbolos> --> "
 #"n\303\272mero || booleano"
) 0 0 24 29 1 #"\n"
0 0 17 3 46
#"; Busca un s\303\255mbolo en una lista de s\303\255mbolos."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"encontrar-posicion"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"simbolo"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"buscar-posicion"
0 0 24 3 1 #" "
0 0 14 3 7 #"simbolo"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; buscar-posicion: s\303\255mbolo"
 #" <lista de s\303\255mbolos> --> n\303\272mero || booleano"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; Retorna el n\303\272mero de la posici\303\263n de un s\303\255mbol"
 #"o en una lista de s\303\255mbolos."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"buscar-posicion"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"simbolo"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"indice"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"S"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 14 3 7 #"simbolo"
0 0 24 3 3 #")) "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; indice: (s\303\255mbolo --> booleano) <lista de s\303\255mbolos> -"
 #"-> n\303\272mero || booleano"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
(
 #"; Calcula la posici\303\263n de un"
 #" s\303\255mbolo en una lista de s\303\255mbolos."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"indice"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"metodo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"posicion"
0 0 24 3 2 #" ("
0 0 14 3 6 #"indice"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 2 #"#f"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; obtener-valor: dato || blanco --> dato"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Retorna el valor expresado de un blanco o el mismo dato de entrada"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"obtener-valor"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"entrada"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"blanco?"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"blanco"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 15 #"valor-expresado"
0 0 24 3 2 #") "
0 0 14 3 15 #"valor-expresado"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 7 #"entrada"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; direccionar: <vector de datos> --> <vector de blanco>"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Retorna un vector de blancos directos a partir de un vector de val"
 #"ores."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"direccionar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 2 #" ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 13 #"obtener-valor"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 3 #"vec"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 123
(
 #"; Funciones para ambientes                                          "
 #"                                                       "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; ambiente-vacio: () --> ambiente"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Inicializa un ambiente vac\303\255o."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"ambiente-vacio"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 18 #"ambiente-vacio-rec"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; ambiente-extendido: <lista de s\303\255mbolos> <lista de datos> am"
 #"biente --> ambiente"
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Extiende un ambiente de entrada con nuevas ligaduras."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"ambiente-extendido"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 17 #"ambiente-anterior"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 22 #"ambiente-extendido-rec"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 2 #") "
0 0 14 3 17 #"ambiente-anterior"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 116
(
 #"; ambiente-extendido-recursivo: <lista de s\303\255mbolos> <lista de"
 #" listas de s\303\255mbolos> expresi\303\263n ambiente --> ambiente"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; Extiende un ambiente de entrada con nuevas ligaduras para operacio"
 #"nes recursivas."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 28 #"ambiente-extendido-recursivo"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"nombres"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 7 #"cuerpos"
0 0 24 3 1 #" "
0 0 14 3 17 #"ambiente-anterior"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"longitud"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"nombres"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"valores"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 14 3 8 #"longitud"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #" ("
0 0 14 3 22 #"ambiente-extendido-rec"
0 0 24 3 1 #" "
0 0 14 3 7 #"nombres"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 17 #"ambiente-anterior"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"for-each"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 2 #" ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"clausura"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"iota"
0 0 24 3 1 #" "
0 0 14 3 8 #"longitud"
0 0 24 3 2 #") "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 7 #"cuerpos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 8 #"ambiente"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ambiente-extendido-refs: <lista de s\303\255mbolos> <vector de dat"
 #"os> ambiente --> ambiente"
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Extiende un ambiente de entrada con nuevas ligaduras."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"ambiente-extendido-refs"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 17 #"ambiente-anterior"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 22 #"ambiente-extendido-rec"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 11 #"direccionar"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 2 #") "
0 0 14 3 17 #"ambiente-anterior"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; buscar: ambiente s\303\255mbolo --> dato"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; Retorna el valor de una variable ligada en un ambiente de entrada."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"buscar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 14 3 7 #"simbolo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"desreferenciar"
0 0 24 3 2 #" ("
0 0 14 3 17 #"buscar-referencia"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 14 3 7 #"simbolo"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53
#"; buscar-referencia: ambiente s\303\255mbolo --> referencia"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; Retorna la referencia de un s\303\255mbolo ligado en un ambiente d"
 #"e entrada."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"buscar-referencia"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 7 #"simbolo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"ambiente-vacio-rec"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"buscar-referencia"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 19 #"No se encontr\303\263 ~s\""
0 0 24 3 1 #" "
0 0 14 3 7 #"simbolo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 22 #"ambiente-extendido-rec"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 17 #"ambiente-anterior"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"posicion"
0 0 24 3 2 #" ("
0 0 14 3 18 #"encontrar-posicion"
0 0 24 3 1 #" "
0 0 14 3 7 #"simbolo"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 17 #"buscar-referencia"
0 0 24 3 1 #" "
0 0 14 3 17 #"ambiente-anterior"
0 0 24 3 1 #" "
0 0 14 3 7 #"simbolo"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; ambiente-camposT: registro --> ambiente"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; Construye un ambiente extendiendo los campos de un registro y sus "
 #"valores."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"ambiente-camposT"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"registro"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 23 #"ambiente-extendido-refs"
0 0 24 3 2 #" ("
0 0 14 3 14 #"obtenerIds-reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 3 #") ("
0 0 14 3 17 #"obtenerCampos-reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 3 #") ("
0 0 14 3 14 #"ambiente-vacio"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; ambiente-camposC: <lista de part> --> ambiente"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Construye un ambiente extendiendo los campos de un objeto y sus va"
 #"lores."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"ambiente-camposC"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"objeto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 23 #"ambiente-extendido-refs"
0 0 24 3 2 #" ("
0 0 14 3 14 #"obtenerIds-obj"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 3 #") ("
0 0 14 3 17 #"obtenerCampos-obj"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 3 #") ("
0 0 14 3 14 #"ambiente-vacio"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 129
(
 #"; Funciones para el interpretador:                                  "
 #"                                                             "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ejecutar: programa --> dato"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #"; Ejecuta el c\303\263digo de un programa con un ambiente inicial va"
 #"c\303\255o."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"ejecutar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 4 #"   ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 4 #"   ("
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 10 #"dec-tablas"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-clases"
0 0 24 3 1 #" "
0 0 14 3 6 #"codigo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 4 #"   ("
0 0 14 3 15 #"declarar-tablas"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-tablas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 15 #"declarar-clases"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-clases"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 6 #"     ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 6 #"codigo"
0 0 24 3 2 #" ("
0 0 14 3 14 #"ambiente-vacio"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; evaluar: expresi\303\263n ambiente -> dato"
0 0 24 29 1 #"\n"
0 0 17 3 52
#"; Eval\303\272a una expresi\303\263n con un ambiente de entrada."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"evaluar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"codigo"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"codigo"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"int-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 2 #") "
0 0 14 3 4 #"dato"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"string-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 2 #") "
0 0 14 3 4 #"dato"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"bool-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dato"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"|#T|"
0 0 24 3 1 #" "
0 0 14 3 4 #"dato"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"|#F|"
0 0 24 3 1 #" "
0 0 14 3 4 #"dato"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 2 #"se"
0 0 19 3 1 #" "
0 0 19 3 8 #"reconoce"
0 0 19 3 1 #" "
0 0 19 3 2 #"el"
0 0 19 3 1 #" "
0 0 19 3 17 #"tipo de dato #~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"dato"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 3 #") ("
0 0 14 3 6 #"buscar"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"prim-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operador"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"entradas"
0 0 24 3 2 #" ("
0 0 14 3 21 #"evaluar-entradas-prim"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 11 #"operar-prim"
0 0 24 3 1 #" "
0 0 14 3 8 #"operador"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"if-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pregunta1"
0 0 24 3 1 #" "
0 0 14 3 9 #"positiva1"
0 0 24 3 1 #" "
0 0 14 3 9 #"preguntas"
0 0 24 3 1 #" "
0 0 14 3 9 #"positivas"
0 0 24 3 1 #" "
0 0 14 3 8 #"negativa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"aplicar-if"
0 0 24 3 1 #" "
0 0 14 3 9 #"pregunta1"
0 0 24 3 1 #" "
0 0 14 3 9 #"positiva1"
0 0 24 3 1 #" "
0 0 14 3 9 #"preguntas"
0 0 24 3 1 #" "
0 0 14 3 9 #"positivas"
0 0 24 3 1 #" "
0 0 14 3 8 #"negativa"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"let-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"entradas"
0 0 24 3 2 #" ("
0 0 14 3 20 #"evaluar-entradas-let"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 2 #" ("
0 0 14 3 18 #"ambiente-extendido"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"fun-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"clausura"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"app-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"nombre"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"funcion"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 6 #"nombre"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"argumentos"
0 0 24 3 2 #" ("
0 0 14 3 16 #"evaluar-entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"funcion?"
0 0 24 3 1 #" "
0 0 14 3 7 #"funcion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"operar-fun"
0 0 24 3 1 #" "
0 0 14 3 7 #"funcion"
0 0 24 3 1 #" "
0 0 14 3 10 #"argumentos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"El"
0 0 19 3 1 #" "
0 0 19 3 7 #"m\303\251todo"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 7 #"aplicar"
0 0 19 3 3 #" no"
0 0 19 3 1 #" "
0 0 19 3 11 #"corresponde"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 16 #"una funci\303\263n ~s\""
0 0 24 3 1 #" "
0 0 14 3 7 #"funcion"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"letrec-exp"
0 0 24 3 2 #" ("
0 0 14 3 7 #"nombres"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 7 #"cuerpos"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 2 #" ("
0 0 14 3 28 #"ambiente-extendido-recursivo"
0 0 24 3 1 #" "
0 0 14 3 7 #"nombres"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 7 #"cuerpos"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"set-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"set-ref"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 17 #"buscar-referencia"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"beg-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"principal"
0 0 24 3 1 #" "
0 0 14 3 5 #"otras"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 6 #"actual"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 9 #"principal"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 5 #"otras"
0 0 24 3 1 #" "
0 0 14 3 5 #"otras"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"otras"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 6 #"actual"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"otras"
0 0 24 3 2 #") "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"otras"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"lis-exp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"elementos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 21 #"evaluar-entradas-prim"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"sel-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"actual"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"seleccionar"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #") "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 17 #"))               "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"for-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #" "
0 0 14 3 6 #"parada"
0 0 24 3 1 #" "
0 0 14 3 10 #"incremento"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"aplicar-for"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #") ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 6 #"parada"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #") ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 10 #"incremento"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #") "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"new-exp"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"parametros"
0 0 24 3 2 #" ("
0 0 14 3 16 #"evaluar-entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 6 #"objeto"
0 0 24 3 2 #" ("
0 0 14 3 13 #"construir-obj"
0 0 24 3 1 #" "
0 0 14 3 12 #"nombre-clase"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"buscar&aplicarC"
0 0 24 3 1 #" "
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 10 #"parametros"
0 0 24 3 2 #") "
0 0 14 3 6 #"objeto"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"met-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"parametros"
0 0 24 3 2 #" ("
0 0 14 3 16 #"evaluar-entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"obj"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"buscar&aplicarC"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 2 #" ("
0 0 14 3 13 #"obtener-clase"
0 0 24 3 1 #" "
0 0 14 3 3 #"obj"
0 0 24 3 2 #") "
0 0 14 3 3 #"obj"
0 0 24 3 1 #" "
0 0 14 3 10 #"parametros"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"ins-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"campos"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 21 #"evaluar-entradas-prim"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 8 #"posicion"
0 0 24 3 2 #" ("
0 0 14 3 11 #"generar-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 18 #"ambiente-registros"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 18 #"ambiente-registros"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 6 #"campos"
0 0 24 3 2 #") "
0 0 14 3 18 #"ambiente-registros"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"acc-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"extraer-registro"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 18 #"ambiente-registros"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"tab-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"parametros"
0 0 24 3 2 #" ("
0 0 14 3 16 #"evaluar-entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"buscar&aplicarT"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 2 #" ("
0 0 14 3 16 #"obtenerTabla-reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 2 #") "
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 10 #"parametros"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"selT-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"selector"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 12 #"seleccionarT"
0 0 24 3 1 #" "
0 0 14 3 8 #"selector"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 9 #"condicion"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 2 #" ("
0 0 14 3 16 #"obtenerRegistros"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 18 #"ambiente-registros"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; evaluar-entradas: <list de expresiones> ambiente --> <lista de dat"
 #"os>"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Eval\303\272a una lista de expresiones con un ambiente de entrada."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"evaluar-entradas"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"entrada"
0 0 24 3 3 #") ("
0 0 14 3 15 #"evaluar-entrada"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")) "
0 0 14 3 8 #"entradas"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; evaluar-entrada: expresi\303\263n ambiente --> dato"
0 0 24 29 1 #"\n"
0 0 17 3 52
#"; Eval\303\272a una expresi\303\263n con un ambiente de entrada."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"evaluar-entrada"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"entrada"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 16 #"blanco-indirecto"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"ref"
0 0 24 3 2 #" ("
0 0 14 3 17 #"buscar-referencia"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"blanco"
0 0 24 3 2 #" ("
0 0 14 3 19 #"desreferenciar-prim"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 15 #"valor-expresado"
0 0 24 3 2 #") "
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 16 #"blanco-indirecto"
0 0 24 3 2 #" ("
0 0 14 3 10 #"referencia"
0 0 24 3 2 #") "
0 0 14 3 10 #"referencia"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; evaluar-entradas-prim: <lista de expresiones> ambiente --> <lista "
 #"de datos>"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; Eval\303\272a una lista de expresiones con un ambiente de entrada "
 #"para una operaci\303\263n primitiva."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"evaluar-entradas-prim"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"entrada"
0 0 24 3 3 #") ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")) "
0 0 14 3 8 #"entradas"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; evaluar-entradas-let: <lista de expresiones> ambiente --> <lista d"
 #"e datos>"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; Eval\303\272a una lista de expresiones con un ambiente de entrada "
 #"para una operaci\303\263n let."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"evaluar-entradas-let"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"entradas"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"entrada"
0 0 24 3 3 #") ("
0 0 14 3 19 #"evaluar-entrada-let"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 3 #")) "
0 0 14 3 8 #"entradas"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; evaluar-entrada-let: expresi\303\263n ambiente --> dato"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; Eval\303\272a una expresi\303\263n con un ambiente de entrada para"
 #" una operaci\303\263n let."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"evaluar-entrada-let"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"entrada"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 3 1 #" "
0 0 14 3 8 #"ambiente"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56
#"; operar-prim: primitiva <lista de n\303\272meros> --> n\303\272mero"
0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #"; Opera una lista de n\303\272meros de acuerdo a una primitiva de en"
 #"trada."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"operar-prim"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operador"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 8 #"numeros?"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 8 #"operador"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"sum-prim"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"sumar"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"res-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"mul-prim"
0 0 24 3 5 #" () ("
0 0 14 3 11 #"multiplicar"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"div-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"inc-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"dec-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"eq-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"max-prim"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"maximo"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"min-prim"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"minimo"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"men-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"may-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"meeq-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"maeq-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"operar-prim"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"Los"
0 0 19 3 1 #" "
0 0 19 3 5 #"datos"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 1 #" "
0 0 19 3 7 #"entrada"
0 0 19 3 1 #" "
0 0 19 3 2 #"no"
0 0 19 3 1 #" "
0 0 19 3 3 #"son"
0 0 19 3 13 #" n\303\272meros ~s\""
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 10 #"booleanos?"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 8 #"operador"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"and-prim"
0 0 24 3 5 #" () ("
0 0 14 3 11 #"aplicar-and"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"or-prim"
0 0 24 3 5 #" () ("
0 0 14 3 10 #"aplicar-or"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"not-prim"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"eq-prim"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"operar-prim"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Los"
0 0 19 3 1 #" "
0 0 19 3 5 #"datos"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 8 #" entrada"
0 0 19 3 1 #" "
0 0 19 3 2 #"no"
0 0 19 3 1 #" "
0 0 19 3 17 #"son booleanos ~s\""
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 8 #"strings?"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 8 #"operador"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"app-prim"
0 0 24 3 5 #" () ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"|\""
0 0 24 3 2 #" ("
0 0 14 3 12 #"unir-strings"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"|\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"len-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"operar-prim"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"Los"
0 0 19 3 6 #" datos"
0 0 19 3 3 #" de"
0 0 19 3 27 #" entrada no son strings ~s\""
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 7 #"listas?"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 8 #"operador"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"car-prim"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"cdr-prim"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"nul-prim"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"app-prim"
0 0 24 3 5 #" () ("
0 0 14 3 11 #"unir-listas"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"len-prim"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"operar-prim"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"Los"
0 0 19 3 1 #" "
0 0 19 3 5 #"datos"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 1 #" "
0 0 19 3 7 #"entrada"
0 0 19 3 1 #" "
0 0 19 3 2 #"no"
0 0 19 3 1 #" "
0 0 19 3 14 #"son listas ~s\""
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 10 #"caso-cons?"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 8 #"operador"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"con-prim"
0 0 24 3 5 #" () ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"operar-prim"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"Los"
0 0 19 3 1 #" "
0 0 19 3 5 #"datos"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 1 #" "
0 0 19 3 7 #"entrada"
0 0 19 3 1 #" "
0 0 19 3 2 #"no"
0 0 19 3 1 #" "
0 0 19 3 17 #"son correctos ~s\""
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"operar-prim"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Los"
0 0 19 3 1 #" "
0 0 19 3 5 #"datos"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 1 #" "
0 0 19 3 7 #"entrada"
0 0 19 3 1 #" "
0 0 19 3 2 #"no"
0 0 19 3 1 #" "
0 0 19 3 17 #"son correctos ~s\""
0 0 24 3 1 #" "
0 0 14 3 9 #"operandos"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 119
(
 #"; Funciones para tablas:                                            "
 #"                                                   "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; obtenerRegistros: s\303\255mbolo <lista de registro> --> <lista de"
 #" registro>"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#"; Filtra los registros de una lista que no hacen parte de una tabla."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"obtenerRegistros"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 2 #" ("
0 0 14 3 16 #"obtenerTabla-reg"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 16 #"obtenerRegistros"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 16 #"obtenerRegistros"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; extraer-registro: s\303\255mbolo n\303\272mero <lista de registro>"
 #" --> registro"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; Busca un registro  en una lista a partir de una posici\303\263n y "
 #"el nombre de la tabla."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"extraer-registro"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"extraer-registro"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"No se encontr\303\263 el registro.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 2 #" ("
0 0 14 3 16 #"obtenerTabla-reg"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 2 #" ("
0 0 14 3 14 #"obtenerPos-reg"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 16 #"extraer-registro"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 17 3 55
#"; generar-pos: s\303\255mbolo <lista de registro> --> n\303\272mero"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Retorna la cantidad de registros de una tabla en una lista de regi"
 #"stros."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"generar-pos"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"obtenerTabla-reg"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")) "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"generar-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"generar-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; obtenerTabla-det: dec-table --> s\303\255mbolo"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; Retorna el nombre de una tabla a partir de una declaraci\303\263n "
 #"de tabla."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"obtenerTabla-det"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"dec-table"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"metodos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52
#"; obtenerIds-det: dec-table --> <lista de s\303\255mbolos>"
0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #"; Retorna la lista de s\303\255mbolos de los atributos de una tabla "
 #"a partir de una declaraci\303\263n de tabla."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"obtenerIds-det"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"dec-table"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"metodos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 3 #"ids"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; obtenerMetodos-det: dec-table --> <lista de dec-method>"
0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #"; Retorna la lista de declaraciones de m\303\251todos de una tabla a"
 #" partir de una declaraci\303\263n de tabla."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"obtenerMetodos-det"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"dec-table"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"metodos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 7 #"metodos"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; buscar&aplicarT: s\303\255mbolo s\303\255mbolo registro <lista de "
 #"datos> --> dato"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; Encuentra y aplica un m\303\251todo a partir de un registro y unos"
 #" par\303\241metros de entrada."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"buscar&aplicarT"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"dec-m"
0 0 24 3 2 #" ("
0 0 14 3 13 #"buscar-metodo"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 2 #" ("
0 0 14 3 20 #"obtenerMetodos-tabla"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"dec-method?"
0 0 24 3 1 #" "
0 0 14 3 5 #"dec-m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 15 #"aplicar-metodoT"
0 0 24 3 1 #" "
0 0 14 3 5 #"dec-m"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"buscar&aplicarT"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"No"
0 0 19 3 1 #" "
0 0 19 3 27 #"se encontr\303\263 el m\303\251todo ~s\""
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; aplicar-metodoT: dec-method s\303\255mbolo registro <lista de dato"
 #"s> --> dato"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Aplica un m\303\251todo a partir de un registro y unos par\303\241"
 #"metros de entrada."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"aplicar-metodoT"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 14 #"obtenerIds-dem"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"cuerpo"
0 0 24 3 2 #" ("
0 0 14 3 17 #"obtenerCuerpo-dem"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 18 #"ambiente-extendido"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 2 #") "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 16 #"ambiente-camposT"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; declarar-tablas: <lista de dec-table> --> void"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; Cambia el estado del ambiente de tablas con una lista de declaraci"
 #"ones de tablas."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"declarar-tablas"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 13 #"declaraciones"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-tablas"
0 0 24 3 1 #" "
0 0 14 3 13 #"declaraciones"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; buscar-tabla: s\303\255mbolo --> dec-table"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; Retorna la declaraci\303\263n de una tala a partir del nombre de u"
 #"na tabla."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"buscar-tabla"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tabla"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 15 #"ambiente-actual"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-tablas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-actual"
0 0 24 3 3 #") ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"buscar-tabla"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 2 #"se"
0 0 19 3 23 #" encontr\303\263 la tabla ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"obtenerTabla-det"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-actual"
0 0 24 3 3 #")) "
0 0 14 3 5 #"tabla"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-actual"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-actual"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; obtenerMetodos-tabla: s\303\255mbolo --> <lista de dec-method>"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; Retorna una lista de declaraciones de m\303\251todos a partir del "
 #"nombre de una tabla."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"obtenerMetodos-tabla"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tabla"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"obtenerMetodos-det"
0 0 24 3 2 #" ("
0 0 14 3 12 #"buscar-tabla"
0 0 24 3 1 #" "
0 0 14 3 5 #"tabla"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 124
(
 #"; Funciones para referencias:                                       "
 #"                                                        "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; referencia-directa?: referencia --> booleano"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; Indica si una referencia apunta a un blanco directo o a uno indire"
 #"cto."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"referencia-directa?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"R"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 11 #"referencia?"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"referencia"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"blanco"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 15 #"valor-expresado"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 16 #"blanco-indirecto"
0 0 24 3 2 #" ("
0 0 14 3 18 #"referencia-directa"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; desreferenciar: referencia --> dato"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Retorna el valor m\303\241s interno al cual apunta una referencia."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"desreferenciar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"referencia"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"blanco"
0 0 24 3 2 #" ("
0 0 14 3 19 #"desreferenciar-prim"
0 0 24 3 1 #" "
0 0 14 3 10 #"referencia"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 15 #"valor-expresado"
0 0 24 3 2 #") "
0 0 14 3 15 #"valor-expresado"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"blanco-indirecto"
0 0 24 3 2 #" ("
0 0 14 3 18 #"referencia-directa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"blanco"
0 0 24 3 2 #" ("
0 0 14 3 19 #"desreferenciar-prim"
0 0 24 3 1 #" "
0 0 14 3 18 #"referencia-directa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 15 #"valor-expresado"
0 0 24 3 2 #") "
0 0 14 3 15 #"valor-expresado"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 16 #"blanco-indirecto"
0 0 24 3 2 #" ("
0 0 14 3 19 #"referencia-directa1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"desreferenciar"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 10 #"Referencia"
0 0 19 3 15 #" inv\303\241lida: ~s\""
0 0 24 3 1 #" "
0 0 14 3 18 #"referencia-directa"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; desreferenciar-prim: referencia --> dato || referencia"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Retorna le valor m\303\241s externo al cual apunta una referencia."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"desreferenciar-prim"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"R"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"referencia"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; set-ref: referencia dato --> void"
0 0 24 29 1 #"\n"
0 0 17 3 103
(
 #"; Busca la referencia m\303\241s interna y asigna un nuevo valor a l"
 #"a direcci\303\263n de la referencia de entrada."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"set-ref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"referencia"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"ref"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"blanco"
0 0 24 3 2 #" ("
0 0 14 3 19 #"desreferenciar-prim"
0 0 24 3 1 #" "
0 0 14 3 10 #"referencia"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 2 #" ("
0 0 14 3 15 #"valor-expresado"
0 0 24 3 2 #") "
0 0 14 3 10 #"referencia"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 16 #"blanco-indirecto"
0 0 24 3 2 #" ("
0 0 14 3 18 #"referencia-directa"
0 0 24 3 2 #") "
0 0 14 3 18 #"referencia-directa"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"set-ref-prim"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; set-ref-prim: referencia dato --> void"
0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #"; Asigna un nuevo valor a la direcci\303\263n de la referencia de en"
 #"trada."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"set-ref-prim"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"referencia"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"valores"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 5 #"valor"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 119
(
 #"; Funciones para clases:                                            "
 #"                                                   "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; obtenerClase-dec: dec-class --> s\303\255mbolo"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; Retorna el nombre de una clase a partir de una declaraci\303\263n "
 #"de clase."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"obtenerClase-dec"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"dec-class"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"dc"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"metodos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 12 #"nombre-clase"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52
#"; obtenerIds-dec: dec-class --> <lista de s\303\255mbolos>"
0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #"; Retorna la lista de s\303\255mbolos de los atributos de una clase "
 #"a partir de una declaraci\303\263n de clase."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"obtenerIds-dec"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"dec-class"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"dc"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"metodos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 3 #"ids"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; obtenerMetodos-dec: dec-class --> <lista de dec-method>"
0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #"; Retorna la lista de declaraciones de m\303\251todos de una clase a"
 #" partir de una declaraci\303\263n de clase."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"obtenerMetodos-dec"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"dec-class"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"dc"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 7 #"metodos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 7 #"metodos"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; buscar&aplicarC: s\303\255mbolo s\303\255mbolo <lista de part> <li"
 #"sta de datos> --> dato"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; Encuentra y aplica un m\303\251todo a partir de un objeto y unos p"
 #"ar\303\241metros de entrada."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"buscar&aplicarC"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 5 #"clase"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"dec-m"
0 0 24 3 2 #" ("
0 0 14 3 13 #"buscar-metodo"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 2 #" ("
0 0 14 3 20 #"obtenerMetodos-clase"
0 0 24 3 1 #" "
0 0 14 3 5 #"clase"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"dec-method?"
0 0 24 3 1 #" "
0 0 14 3 5 #"dec-m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 15 #"aplicar-metodoC"
0 0 24 3 1 #" "
0 0 14 3 5 #"dec-m"
0 0 24 3 1 #" "
0 0 14 3 5 #"clase"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"buscar&aplicarC"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"No"
0 0 19 3 1 #" "
0 0 19 3 2 #"se"
0 0 19 3 25 #" encontr\303\263 el m\303\251todo ~s\""
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; aplicar-metodoC: dec-method s\303\255mbolo <lista de part> <lista "
 #"de datos> --> dato"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; Aplica un m\303\251todo a partir de un objeto y unos par\303\241me"
 #"tros de entrada."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"aplicar-metodoC"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #" "
0 0 14 3 5 #"clase"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 14 #"obtenerIds-dem"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"cuerpo"
0 0 24 3 2 #" ("
0 0 14 3 17 #"obtenerCuerpo-dem"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 18 #"ambiente-extendido"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"self"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"blanco-directo"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 2 #") "
0 0 14 3 8 #"entradas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 16 #"ambiente-camposC"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 7 #"evaluar"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; declarar-clases: <lista de dec-class> --> void"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; Cambia el estado del ambiente de clases con una lista de declaraci"
 #"ones de clases."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"declarar-clases"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 13 #"declaraciones"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-clases"
0 0 24 3 1 #" "
0 0 14 3 13 #"declaraciones"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; buscar-clase: s\303\255mbolo --> dec-class"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; Retorna la declaraci\303\263n de una clase a partir del nombre de "
 #"una clase."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"buscar-clase"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"clase"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 15 #"ambiente-actual"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-clases"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-actual"
0 0 24 3 3 #") ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"buscar-clase"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 2 #"se"
0 0 19 3 1 #" "
0 0 19 3 9 #"encontr\303\263"
0 0 19 3 13 #" la clase ~s\""
0 0 24 3 1 #" "
0 0 14 3 5 #"clase"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"obtenerClase-dec"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-actual"
0 0 24 3 3 #")) "
0 0 14 3 5 #"clase"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-actual"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 15 #"ambiente-actual"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; obtenerMetodos-clase: s\303\255mbolo --> <lista de dec-method>"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; Retorna una lista de declaraciones de m\303\251todos a partir del "
 #"nombre de una clase."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"obtenerMetodos-clase"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"clase"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"obtenerMetodos-dec"
0 0 24 3 2 #" ("
0 0 14 3 12 #"buscar-clase"
0 0 24 3 1 #" "
0 0 14 3 5 #"clase"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; obtener-clase: <lista de part> --> s\303\255mbolo"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Retorna el nombre de la clase a la cual pertenece un objeto."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"obtener-clase"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"objeto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"obtenerClase-obj"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 121
(
 #"; Funciones para m\303\251todos:                                    "
 #"                                                           "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; obtenerMetodo-dem: dec-method --> s\303\255mbolo"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Retorna el nombre de un m\303\251t"
 #"odo a partir de una declaraci\303\263n de m\303\251todo."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"obtenerMetodo-dem"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-method"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"dm"
0 0 24 3 2 #" ("
0 0 14 3 13 #"nombre-metodo"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 13 #"nombre-metodo"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53
#"; obtenerIds-dem: dec-method --> <lista de s\303\255mbolos>"
0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #"; Retorna la lista de s\303\255mbolos de los par\303\241metros de un"
 #" m\303\251todo a partir de una declaraci\303\263n de m\303\251todo."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"obtenerIds-dem"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-method"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"dm"
0 0 24 3 2 #" ("
0 0 14 3 13 #"nombre-metodo"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 3 #"ids"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; obtenerCuerpo-dem: dec-method --> expression"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Retorna el cuerpo de un m\303\251t"
 #"odo a partir de una declaraci\303\263n de m\303\251todo."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"obtenerCuerpo-dem"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"declaracion"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"dec-method"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"dm"
0 0 24 3 2 #" ("
0 0 14 3 13 #"nombre-metodo"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 6 #"cuerpo"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #"; obtenerMetodos-dem: <lista de dec-method> --> <lista de s\303\255m"
 #"bolos>"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; Retorna los nombres de los m\303\251todos de una lista de declarac"
 #"iones de m\303\251todos."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"obtenerMetodos-dem"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 13 #"declaraciones"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 17 #"obtenerMetodo-dem"
0 0 24 3 1 #" "
0 0 14 3 13 #"declaraciones"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; buscar-metodo: s\303\255mbolo <lista de dec-method> --> dec-method"
 #" || booleano"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; Busca una declaraci\303\263n de m\303\251todo dentro de una lista "
 #"con el nombre de un m\303\251todo."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"buscar-metodo"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"metodo"
0 0 24 3 1 #" "
0 0 14 3 13 #"declaraciones"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 13 #"declaraciones"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 2 #" ("
0 0 14 3 17 #"obtenerMetodo-dem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"declaraciones"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"declaraciones"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"buscar-metodo"
0 0 24 3 1 #" "
0 0 14 3 6 #"metodo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"declaraciones"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #"; Funciones para objetos:                                           "
 #"                                                    "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; construir-obj: s\303\255mbolo --> <lista de part>"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Construye una lista de partes a partir del nombre de una clase."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"construir-obj"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"clase"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"declaracion"
0 0 24 3 2 #" ("
0 0 14 3 12 #"buscar-clase"
0 0 24 3 1 #" "
0 0 14 3 5 #"clase"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"ob"
0 0 24 3 2 #" ("
0 0 14 3 16 #"obtenerClase-dec"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 3 3 #") ("
0 0 14 3 11 #"make-vector"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 14 #"obtenerIds-dec"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaracion"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; obtenerClase-obj: part --> s\303\255mbolo"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Retorna el nombre de la clase de un objeto."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"obtenerClase-obj"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"O"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"ob"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 9 #"atributos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 12 #"nombre-clase"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; obtenerDecClase-obj: part --> dec-class"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Retorna una declaraci\303\263n de clase a partir de un objeto."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"obtenerDecClase-obj"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"objeto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"buscar-clase"
0 0 24 3 2 #" ("
0 0 14 3 16 #"obtenerClase-obj"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; obtenerCampos-obj: part --> vector"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; Retorna el vector de atributos de un objeto."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"obtenerCampos-obj"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"O"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"ob"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-clase"
0 0 24 3 1 #" "
0 0 14 3 9 #"atributos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"atributos"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; obtenerIds-obj: part --> <lista de s\303\255mbolos>"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Retorna la lista de s\303\255mbolos de los atributos de un objeto."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"obtenerIds-obj"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"objeto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"obtenerIds-dec"
0 0 24 3 2 #" ("
0 0 14 3 19 #"obtenerDecClase-obj"
0 0 24 3 1 #" "
0 0 14 3 6 #"objeto"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 122
(
 #"; Funciones para registros:                                         "
 #"                                                      "
) 0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; obtenerTabla-reg: registro --> s\303\255mbolo"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; Retorna el nombre de la tabla a la cual pertenece un registro de e"
 #"ntrada."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"obtenerTabla-reg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"R"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 6 #"campos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; obtenerPos-reg: registro --> n\303\272mero"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; Retorna la posici\303\263n de un registro."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"obtenerPos-reg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"R"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 6 #"campos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 8 #"posicion"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; obtenerDecTabla-reg: registro --> dec-table"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; Retorna una declaraci\303\263n de tabla a partir de un registro."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"obtenerDecTabla-reg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"registro"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"buscar-tabla"
0 0 24 3 2 #" ("
0 0 14 3 16 #"obtenerTabla-reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; obtenerCampos-reg: registro --> vector"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Retorna el vector de campos de un registro."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"obtenerCampos-reg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"R"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nombre-tabla"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 6 #"campos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 6 #"campos"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; obtenerIds-reg: registro --> <lista de s\303\255mbolos>"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; Retorna la lista de s\303\255mbolos de los campos de un registro."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"obtenerIds-reg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"registro"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"obtenerIds-det"
0 0 24 3 2 #" ("
0 0 14 3 19 #"obtenerDecTabla-reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"registro"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Inicializaci\303\263n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";*******************************************************************"
 #"***********************************************************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"interpretador"
0 0 24 3 1 #")"
0           0
